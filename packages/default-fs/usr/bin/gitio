#!/bin/sh

SCRIPT_PATH="$(dirname "$(realpath "$0")")"
INSTALLER="$SCRIPT_PATH"/../share/gitio/scripts/insti.sh
MODE="${1:-$MODE}"
MODE="${MODE:-$CMD_TYPE}"
MODE="${MODE:-'checkout'}"

XCMD=""
if ! [ "$1" == "" ]; then
    shift  # Shift to remove the first argument (the script name)
fi

# Loop through the remaining arguments
for arg in "$@"; do
  XCMD="$XCMD $arg"
done

CMD="${XCMD:-$CMD}"
CMD="${CMD:-"NaN"}"

unset XCMD

HOME="${HOME:-'/'}"

export DEBIAN_FRONTEND=noninteractive
export TZ=UTC
export LOCAL_DIR="$(pwd)"

github_patch() {
    export CI_COMMIT_REF="$GITHUB_REF"
    export SYSTEM_TOKEN_PASSWD="$GITHUB_TOKEN"
    export OCI_TOKEN="$GITHUB_TOKEN"
    export CI_REPO_NAME="$GITHUB_NAME"
    export CI_REPO_OWNER="$GITHUB_OWNER"
    export CI_REPO="$GITHUB_REPO"
    export CI_REPO_URL='https://github.com/'"$CI_REPO_OWNER"'/'"$CI_REPO_NAME"
}

codeberg_patch() {
    export GIT_DOMAIN="$CI_REPO_OWNER"'.'"codeberg.page"
    export GIT_WEBPAGE='https://'"$GIT_DOMAIN"'/'"$CI_REPO_NAME"
}

system_environment() {
    export GIT_BRANCH="$(basename "$CI_COMMIT_REF")"
    export GIT_TOKEN="$SYSTEM_TOKEN_PASSWD"
    export GIT_PROJECT_NAME="$CI_REPO_NAME"
    export GIT_USERNAME="$CI_REPO_OWNER"
    export GIT_REPO="$CI_REPO"
    export GIT_HOST="$(echo "$CI_REPO_URL" | awk -F/ '{print $3}')"
    export GIT_DOMAIN="$CI_REPO_OWNER"'.'"$GIT_HOST"
    export GIT_WEBPAGE='https://'"$GIT_DOMAIN"'/'"$CI_REPO_NAME"
    export GIT_EMAIL='example@example.com'
    export GIT_WORKDIR="$(pwd)"
}

app_installer() {
    sh "$INSTALLER" tar gzip git openssh jq curl gawk coreutils
}

xssh() {
    mkdir -p "$HOME"/.ssh 2>/dev/null 3>&2
    echo "$SYSTEM_TOKEN" > "$HOME"/.ssh/ci
    chmod 600 "$HOME"/.ssh/ci

    echo "$HOME"/.ssh/ci >> "$HOME"/.ssh/authorized_keys

    echo "   IdentityFile $HOME/.ssh/ci" >> /etc/ssh/ssh_config

    eval "$(ssh-agent -s)"

    ssh -T git@"$GIT_HOST"
}

if ! [ -f /tmp/gitio.ci ]; then
    app_installer
    echo 'OK' > /tmp/gitio.ci
fi

if ! [ -f /tmp/gitio-ssh.ci ]; then
    if [ "$OPENSSH" = "true" ]; then
        sh "$INSTALLER" openssh
        echo 'OK' > /tmp/gitio-ssh.ci
    fi
fi

if [ "$GITHUB_ACTIONS" = "true" ]; then
    github_patch
fi

system_environment

if [ "$GIT_HOST" = "codeberg.org" ]; then
    codeberg_patch
fi

if ! [ -z "$SYSTEM_TOKEN" ]; then
    if [ "$OPENSSH" = "true" ]; then
        xssh
    else
        echo 'WARN: OpenSSH functionality may not work although SYSTEM_TOKEN is defined!'
    fi
fi

checkout() {
    echo '[CHECKOUT]'
    if [ -z "$SYSTEM_TOKEN" ]; then
        url='https://'$GIT_USERNAME:$GIT_TOKEN@"$GIT_HOST"'/'"$GIT_USERNAME"'/'"$GIT_REPO"
    else
        url='git@'"$GIT_HOST"':'"$GIT_USERNAME"'/'"$GIT_REPO"'.git'
    fi
    git clone "$CMD" "$url"
    exit $?
}

container() {
    echo '[CONTAINER]'
    echo "$CMD"
    if ! [ "$CMD" = "NaN" ]; then
        for element in $CMD; do
            if ! [ -z "${element##*:*}" ]; then
                echo 'Missing data syntax in '"$element"'. Exiting...'
                exit 1
            fi
            IFS=":" read -r name value <<EOF
$element
EOF
            export "$name=$value"
        done
    fi

    if ! [ -f "/tmp/kaniko.ci" ]; then
        sh "$INSTALLER" make go docker

        git clone --recursive https://github.com/GoogleContainerTools/kaniko /kaniko

        cd /kaniko

        make

        mv out/executor /usr/bin/kaniko
        chmod +x /usr/bin/kaniko

        echo 'OK' > /tmp/kaniko.ci
    fi

    OUTPUT_IMAGE_NAME="${OUTPUT_IMAGE_NAME:-'image:latest'}"
    export GIT_WORKDIR="${GIT_WORKDIR:-"$(pwd)"}"

    GIT_USERNAME="$(echo "${GIT_USERNAME}" | tr '[:upper:]' '[:lower:]')"
    GIT_HOST="$(echo "${GIT_HOST}" | tr '[:upper:]' '[:lower:]')"
    OUTPUT_IMAGE_NAME="$(echo "${OUTPUT_IMAGE_NAME}" | tr '[:upper:]' '[:lower:]')"

    echo "${GIT_TOKEN}" | docker login "${GIT_HOST}" -u "${GIT_USERNAME}" --password-stdin

    cd "${GIT_WORKDIR}"
    echo "${GIT_WORKDIR}"

    kaniko --context . --dockerfile ./Dockerfile --destination "${GIT_HOST}"/"${GIT_USERNAME}"/"${OUTPUT_IMAGE_NAME}"

    exit $?
}

branch() {
    echo '[BRANCH]'
    echo "$CMD"
    if ! [ "$CMD" = "NaN" ]; then
        for element in $CMD; do
            if ! [ -z "${element##*:*}" ]; then
                echo 'Missing data syntax in '"$element"'. Exiting...'
                exit 1
            fi
            IFS=":" read -r name value <<EOF
$element
EOF
            export "$name=$value"
        done
    fi

    export GIT_WORKDIR="${GIT_WORKDIR:-"$(pwd)"}"

    git config --global credential.helper store
    git config --global user.name "$GIT_USERNAME"
    git config --global user.email "$GIT_EMAIL"
    git config --global http.postBuffer 524288000
    git config --global init.defaultBranch "$GIT_BRANCH"

    echo "Checking https://${GIT_HOST}/${GIT_USERNAME}/${GIT_PROJECT_NAME}..."

    http_response=404 # $(curl -s -o /dev/null -w "%{http_code}" -u "$GIT_USERNAME:$GIT_TOKEN" -X GET )

    if [ "$GIT_HOST" = "github.com" ]; then
        http_response=$(curl -s -o /dev/null -w "%{http_code}" -u "$GIT_USERNAME:$GIT_TOKEN" -X GET https://api.github.com/repos/"$GIT_USERNAME"/"$GIT_PROJECT_NAME"/branches/"$GIT_BRANCH")
    fi

    echo 'EXIT CODE '"$http_response"

    cd "$(dirname "$GIT_WORKDIR")"

    if [ -z "$SYSTEM_TOKEN" ]; then
        url='https://'$GIT_USERNAME:$GIT_TOKEN@"$GIT_HOST"'/'"$GIT_REPO"
    else
        url='git@'"$GIT_HOST"':'"$GIT_REPO"'.git'
    fi

    if [ $http_response -eq 200 ]; then
        git clone -b "$GIT_BRANCH" "$url" "$GIT_BRANCH"

        rm -rf "$(basename "$GIT_WORKDIR")"/.git
        mv "$GIT_BRANCH"/.git "$(basename "$GIT_WORKDIR")"/

        rm -rf "$GIT_BRANCH"
        cd "$GIT_WORKDIR"
    else
        cd "$GIT_WORKDIR"
        rm -rf .git
        git init
    fi

    cd "${GIT_WORKDIR}"

    git add -A
    git commit -m "$GIT_BRANCH synchronization at $(date +%Y-%m-%d)"

    git remote remove origin 2>/dev/null 3>&2
    git remote add origin "$url"

    git branch -m "$GIT_BRANCH"

    echo "Pushing to 'https://$GIT_HOST/$GIT_USERNAME/$GIT_PROJECT_NAME'..."

    if [ -z "$SYSTEM_TOKEN" ]; then
        echo "https://$GIT_USERNAME:$GIT_TOKEN@$GIT_HOST" > ~/.git-credentials
    fi

    git push -f -u origin "$GIT_BRANCH"
    exit $?
}

eval "$MODE"
